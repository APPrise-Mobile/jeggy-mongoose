{"version":3,"file":"jeggymongoose.js","sources":["jeggymongoose.js","/source/jeggymongoose.js"],"names":["global","factory","exports","module","require","define","amd","jeggymongoose","jeggy","mongooseMob","merge","_","this","MongooseCollection","_jeggy$Collection","name","mongooseModel","_get","Object","getPrototypeOf","prototype","call","Error","query","projection","find","exec","findOne","id","findById","doc","create","remove","_id","then","foundDoc","save","Collection","_MongooseAdapter__populateDoc","fieldKey","Promise","resolve","reject","populate","error","MongooseAdapter","_jeggy$Adapter","mongooseConnection","isString","getConnection","base","plugin","collections","schema","collection","undefined","isEmpty","getModel","docs","isArray","promises","map","all","Adapter"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jeggy'), require('mongoose-mob'), require('mongoose-merge-plugin'), require('lodash')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jeggy', 'mongoose-mob', 'mongoose-merge-plugin', 'lodash'], factory) :\n  factory((global.jeggymongoose = {}), global.jeggy, global.mongooseMob, global.merge, global._)\n}(this, function (exports, jeggy, mongooseMob, merge, _) { 'use strict';\n\n  mongooseMob = ('default' in mongooseMob ? mongooseMob['default'] : mongooseMob);\n  merge = ('default' in merge ? merge['default'] : merge);\n  _ = ('default' in _ ? _['default'] : _);\n\n  class MongooseCollection extends jeggy.Collection {\n    constructor(name, mongooseModel) {\n      super(name);\n      if(!mongooseModel) {\n        throw new Error('a MongooseCollection must be intiialized with a mongoose model');\n      }\n      this.mongooseModel = mongooseModel;\n    }\n\n    find(query, projection) {\n      return this.mongooseModel.find(query, projection).exec();\n    }\n\n    findOne(query, projection) {\n      return this.mongooseModel.findOne(query, projection).exec();\n    }\n\n    findById(id, projection) {\n      return this.mongooseModel.findById(id, projection).exec();\n    }\n\n    create(doc) {\n      return this.mongooseModel.create(doc);\n    }\n\n    removeWhere(query) {\n      return this.mongooseModel.remove(query);\n    }\n\n    remove(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to remove doc that does not exist id:' + doc._id);\n          }\n\n          return foundDoc.remove();\n        });\n    }\n\n    update(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to update doc that does not exist id:' + doc._id);\n          }\n\n          foundDoc.merge(doc);\n          return foundDoc.save();\n        });\n    }\n  }\n\n  exports.MongooseCollection = MongooseCollection;\n\n  const _MongooseAdapter__populateDoc = function populateDoc(doc, fieldKey) {\n    return new Promise((resolve, reject) => {\n      doc.populate(fieldKey, (error) => {\n        if(error) {\n          return reject(error);\n        }\n\n        resolve(doc);\n      });\n    });\n  };\n\n  class MongooseAdapter extends jeggy.Adapter {\n    constructor(mongooseConnection) {\n      super();\n      if (_.isString(mongooseConnection)) {\n        mongooseConnection = mongooseMob.getConnection(mongooseConnection);\n      }\n\n      mongooseConnection.base.plugin(merge);\n\n      this.mongooseConnection = mongooseConnection;\n      this.collections = {};\n    }\n\n    addCollection(name, schema) {\n      let collection;\n      if (name instanceof MongooseCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const mongooseModel = mongooseMob.getModel(this.mongooseConnection, name, schema);\n        collection = new MongooseCollection(name, mongooseModel);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey) {\n      if (!docs) {\n        throw new Error('tried to populate a null value');\n      }\n\n      if (!_.isArray(docs)) {\n        docs = [docs];\n      }\n\n      const promises = _.map(docs, doc => {\n        return _MongooseAdapter__populateDoc(doc, fieldKey);\n      });\n\n      return Promise.all(promises)\n        .then(() => {\n          return docs;\n        });\n    }\n  }\n\n  exports.MongooseAdapter = MongooseAdapter;\n\n\n\n}));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jeggy'), require('mongoose-mob'), require('mongoose-merge-plugin'), require('lodash')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jeggy', 'mongoose-mob', 'mongoose-merge-plugin', 'lodash'], factory) :\n  factory((global.jeggymongoose = {}), global.jeggy, global.mongooseMob, global.merge, global._)\n}(this, function (exports, jeggy, mongooseMob, merge, _) { 'use strict';\n\n  mongooseMob = ('default' in mongooseMob ? mongooseMob['default'] : mongooseMob);\n  merge = ('default' in merge ? merge['default'] : merge);\n  _ = ('default' in _ ? _['default'] : _);\n\n  class MongooseCollection extends jeggy.Collection {\n    constructor(name, mongooseModel) {\n      super(name);\n      if(!mongooseModel) {\n        throw new Error('a MongooseCollection must be intiialized with a mongoose model');\n      }\n      this.mongooseModel = mongooseModel;\n    }\n\n    find(query, projection) {\n      return this.mongooseModel.find(query, projection).exec();\n    }\n\n    findOne(query, projection) {\n      return this.mongooseModel.findOne(query, projection).exec();\n    }\n\n    findById(id, projection) {\n      return this.mongooseModel.findById(id, projection).exec();\n    }\n\n    create(doc) {\n      return this.mongooseModel.create(doc);\n    }\n\n    removeWhere(query) {\n      return this.mongooseModel.remove(query);\n    }\n\n    remove(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to remove doc that does not exist id:' + doc._id);\n          }\n\n          return foundDoc.remove();\n        });\n    }\n\n    update(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to update doc that does not exist id:' + doc._id);\n          }\n\n          foundDoc.merge(doc);\n          return foundDoc.save();\n        });\n    }\n  }\n\n  exports.MongooseCollection = MongooseCollection;\n\n  const _MongooseAdapter__populateDoc = function populateDoc(doc, fieldKey) {\n    return new Promise((resolve, reject) => {\n      doc.populate(fieldKey, (error) => {\n        if(error) {\n          return reject(error);\n        }\n\n        resolve(doc);\n      });\n    });\n  };\n\n  class MongooseAdapter extends jeggy.Adapter {\n    constructor(mongooseConnection) {\n      super();\n      if (_.isString(mongooseConnection)) {\n        mongooseConnection = mongooseMob.getConnection(mongooseConnection);\n      }\n\n      mongooseConnection.base.plugin(merge);\n\n      this.mongooseConnection = mongooseConnection;\n      this.collections = {};\n    }\n\n    addCollection(name, schema) {\n      let collection;\n      if (name instanceof MongooseCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const mongooseModel = mongooseMob.getModel(this.mongooseConnection, name, schema);\n        collection = new MongooseCollection(name, mongooseModel);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey) {\n      if (!docs) {\n        throw new Error('tried to populate a null value');\n      }\n\n      if (!_.isArray(docs)) {\n        docs = [docs];\n      }\n\n      const promises = _.map(docs, doc => {\n        return _MongooseAdapter__populateDoc(doc, fieldKey);\n      });\n\n      return Promise.all(promises)\n        .then(() => {\n          return docs;\n        });\n    }\n  }\n\n  exports.MongooseAdapter = MongooseAdapter;\n\n\n\n}));\n"]}