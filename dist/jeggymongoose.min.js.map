{"version":3,"sources":["jeggymongoose.js","/source/jeggymongoose.js"],"names":["global","factory","exports","module","require","define","amd","jeggymongoose","_","jeggy","mongooseMob","merge","this","MongooseCollection","_jeggy$Collection","name","mongooseModel","_get","Object","getPrototypeOf","prototype","call","Error","query","projection","castToMongoose","mongoQuery","find","lean","exec","findOne","id","findById","doc","create","docs","Promise","resolve","reject","_this","collection","insertMany","err","result","ops","remove","_id","then","foundDoc","isFunction","toObject","save","ids","update","$in","multi","Collection","populateDoc","fieldKey","populate","error","MongooseAdapter","_jeggy$Adapter","mongooseConnection","opts","isString","getConnection","base","plugin","collections","schema","undefined","isEmpty","getModel","isArray","promises","map","all","Adapter"],"mappings":"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","file":"jeggymongoose.js","sourceRoot":"/source/","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('jeggy'), require('mongoose-mob'), require('mongoose-merge-plugin')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'jeggy', 'mongoose-mob', 'mongoose-merge-plugin'], factory) :\n  factory((global.jeggymongoose = {}), global._, global.jeggy, global.mongooseMob, global.merge)\n}(this, function (exports, _, jeggy, mongooseMob, merge) { 'use strict';\n\n  _ = ('default' in _ ? _['default'] : _);\n  mongooseMob = ('default' in mongooseMob ? mongooseMob['default'] : mongooseMob);\n  merge = ('default' in merge ? merge['default'] : merge);\n\n  class MongooseCollection extends jeggy.Collection {\n    constructor(name, mongooseModel) {\n      super(name);\n      if(!mongooseModel) {\n        throw new Error('a MongooseCollection must be intiialized with a mongoose model');\n      }\n      this.mongooseModel = mongooseModel;\n    }\n\n    find(query, projection, castToMongoose) {\n      let mongoQuery = this.mongooseModel.find(query, projection);\n      if(castToMongoose !== true) {\n        mongoQuery = mongoQuery.lean();\n      }\n      return mongoQuery.exec();\n    }\n\n    findOne(query, projection) {\n      return this.mongooseModel.findOne(query, projection).exec();\n    }\n\n    findById(id, projection) {\n      return this.mongooseModel.findById(id, projection).exec();\n    }\n\n    create(doc) {\n      return this.mongooseModel.create(doc);\n    }\n\n    insertMany(docs) {\n      return new Promise((resolve, reject) => {\n        this.mongooseModel.collection.insertMany(docs, {}, (err, result) => {\n          if(err) {\n            return reject(err);\n          }\n\n          resolve(result.ops);\n        });\n      });\n    }\n\n    removeWhere(query) {\n      return this.mongooseModel.remove(query);\n    }\n\n    remove(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to remove doc that does not exist id:' + doc._id);\n          }\n\n          return foundDoc.remove();\n        });\n    }\n\n    update(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to update doc that does not exist id:' + doc._id);\n          }\n\n          if(_.isFunction(doc.toObject)) {\n            doc = doc.toObject();\n          }\n          foundDoc.merge(doc);\n          return foundDoc.save();\n        });\n    }\n\n    updateMany(ids, update) {\n      return this.mongooseModel.update({_id: {$in: ids}}, update, {multi: true}).exec();\n    }\n  }\n\n  exports.MongooseCollection = MongooseCollection;\n\n  const populateDoc = function populateDoc(doc, fieldKey) {\n    return new Promise((resolve, reject) => {\n      doc.populate(fieldKey, (error) => {\n        if(error) {\n          return reject(error);\n        }\n\n        resolve(doc);\n      });\n    });\n  };\n\n  class MongooseAdapter extends jeggy.Adapter {\n    constructor(mongooseConnection, opts) {\n      super();\n      if (_.isString(mongooseConnection)) {\n        mongooseConnection = mongooseMob.getConnection(mongooseConnection, opts);\n      }\n\n      mongooseConnection.base.plugin(merge);\n\n      this.mongooseConnection = mongooseConnection;\n      this.collections = {};\n    }\n\n    addCollection(name, schema) {\n      let collection;\n      if (name instanceof MongooseCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const mongooseModel = mongooseMob.getModel(this.mongooseConnection, name, schema);\n        collection = new MongooseCollection(name, mongooseModel);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey) {\n      if (!docs) {\n        throw new Error('tried to populate a null value');\n      }\n\n      if (!_.isArray(docs)) {\n        docs = [docs];\n      }\n\n      const promises = _.map(docs, doc => {\n        return populateDoc(doc, fieldKey);\n      });\n\n      return Promise.all(promises)\n        .then(() => {\n          return docs;\n        });\n    }\n  }\n\n  exports.MongooseAdapter = MongooseAdapter;\n\n\n\n}));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('jeggy'), require('mongoose-mob'), require('mongoose-merge-plugin')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'jeggy', 'mongoose-mob', 'mongoose-merge-plugin'], factory) :\n  factory((global.jeggymongoose = {}), global._, global.jeggy, global.mongooseMob, global.merge)\n}(this, function (exports, _, jeggy, mongooseMob, merge) { 'use strict';\n\n  _ = ('default' in _ ? _['default'] : _);\n  mongooseMob = ('default' in mongooseMob ? mongooseMob['default'] : mongooseMob);\n  merge = ('default' in merge ? merge['default'] : merge);\n\n  class MongooseCollection extends jeggy.Collection {\n    constructor(name, mongooseModel) {\n      super(name);\n      if(!mongooseModel) {\n        throw new Error('a MongooseCollection must be intiialized with a mongoose model');\n      }\n      this.mongooseModel = mongooseModel;\n    }\n\n    find(query, projection, castToMongoose) {\n      let mongoQuery = this.mongooseModel.find(query, projection);\n      if(castToMongoose !== true) {\n        mongoQuery = mongoQuery.lean();\n      }\n      return mongoQuery.exec();\n    }\n\n    findOne(query, projection) {\n      return this.mongooseModel.findOne(query, projection).exec();\n    }\n\n    findById(id, projection) {\n      return this.mongooseModel.findById(id, projection).exec();\n    }\n\n    create(doc) {\n      return this.mongooseModel.create(doc);\n    }\n\n    insertMany(docs) {\n      return new Promise((resolve, reject) => {\n        this.mongooseModel.collection.insertMany(docs, {}, (err, result) => {\n          if(err) {\n            return reject(err);\n          }\n\n          resolve(result.ops);\n        });\n      });\n    }\n\n    removeWhere(query) {\n      return this.mongooseModel.remove(query);\n    }\n\n    remove(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to remove doc that does not exist id:' + doc._id);\n          }\n\n          return foundDoc.remove();\n        });\n    }\n\n    update(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to update doc that does not exist id:' + doc._id);\n          }\n\n          if(_.isFunction(doc.toObject)) {\n            doc = doc.toObject();\n          }\n          foundDoc.merge(doc);\n          return foundDoc.save();\n        });\n    }\n\n    updateMany(ids, update) {\n      return this.mongooseModel.update({_id: {$in: ids}}, update, {multi: true}).exec();\n    }\n  }\n\n  exports.MongooseCollection = MongooseCollection;\n\n  const populateDoc = function populateDoc(doc, fieldKey) {\n    return new Promise((resolve, reject) => {\n      doc.populate(fieldKey, (error) => {\n        if(error) {\n          return reject(error);\n        }\n\n        resolve(doc);\n      });\n    });\n  };\n\n  class MongooseAdapter extends jeggy.Adapter {\n    constructor(mongooseConnection, opts) {\n      super();\n      if (_.isString(mongooseConnection)) {\n        mongooseConnection = mongooseMob.getConnection(mongooseConnection, opts);\n      }\n\n      mongooseConnection.base.plugin(merge);\n\n      this.mongooseConnection = mongooseConnection;\n      this.collections = {};\n    }\n\n    addCollection(name, schema) {\n      let collection;\n      if (name instanceof MongooseCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        const mongooseModel = mongooseMob.getModel(this.mongooseConnection, name, schema);\n        collection = new MongooseCollection(name, mongooseModel);\n      }\n\n      this.collections[name] = collection;\n      return collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n\n    populate(docs, fieldKey) {\n      if (!docs) {\n        throw new Error('tried to populate a null value');\n      }\n\n      if (!_.isArray(docs)) {\n        docs = [docs];\n      }\n\n      const promises = _.map(docs, doc => {\n        return populateDoc(doc, fieldKey);\n      });\n\n      return Promise.all(promises)\n        .then(() => {\n          return docs;\n        });\n    }\n  }\n\n  exports.MongooseAdapter = MongooseAdapter;\n\n\n\n}));\n"]}