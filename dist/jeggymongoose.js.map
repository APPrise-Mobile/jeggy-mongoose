{"version":3,"sources":["jeggymongoose.js"],"names":[],"mappings":"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","file":"jeggymongoose.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jeggy'), require('mongoose-mob'), require('mongoose-merge-plugin'), require('lodash')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'jeggy', 'mongoose-mob', 'mongoose-merge-plugin', 'lodash'], factory) :\n  factory((global.jeggymongoose = {}), global.jeggy, global.mongooseMob, global.merge, global._)\n}(this, function (exports, jeggy, mongooseMob, merge, _) { 'use strict';\n\n  mongooseMob = ('default' in mongooseMob ? mongooseMob['default'] : mongooseMob);\n  merge = ('default' in merge ? merge['default'] : merge);\n  _ = ('default' in _ ? _['default'] : _);\n\n  class MongooseCollection extends jeggy.Collection {\n    constructor(name, mongooseModel) {\n      super(name);\n      if(!mongooseModel) {\n        throw new Error('a MongooseCollection must be intiialized with a mongoose model');\n      }\n      this.mongooseModel = mongooseModel;\n    }\n\n    find(query) {\n      return this.mongooseModel.find(query).exec();\n    }\n\n    findOne(query) {\n      return this.mongooseModel.findOne(query).exec();\n    }\n\n    findById(id) {\n      return this.mongooseModel.findById(id).exec();\n    }\n\n    create(doc) {\n      return this.mongooseModel.create(doc);\n    }\n\n    removeWhere(query) {\n      return this.mongooseModel.remove(query);\n    }\n\n    remove(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to remove doc that does not exist id:' + doc._id);\n          }\n\n          return foundDoc.remove();\n        });\n    }\n\n    update(doc) {\n      return this.mongooseModel.findById(doc._id).exec()\n        .then((foundDoc) => {\n          if(!foundDoc) {\n            throw new Error('trying to update doc that does not exist id:' + doc._id);\n          }\n\n          foundDoc.merge(doc);\n          return foundDoc.save();\n        });\n    }\n  }\n\n  exports.MongooseCollection = MongooseCollection;\n\n  class MongooseAdapter extends jeggy.Adapter {\n    constructor(mongooseConnection) {\n      super();\n      if (_.isString(mongooseConnection)) {\n        mongooseConnection = mongooseMob.getConnection(mongooseConnection);\n      }\n\n      this.mongooseConnection = mongooseConnection;\n      this.collections = {};\n    }\n\n    addCollection(name, schema) {\n      let collection;\n      if (name instanceof MongooseCollection) {\n        collection = name;\n        name = collection.name;\n      } else {\n        if (!_.isString(name) || _.isEmpty(name)) {\n          throw new Error('must provide a name when adding a collection');\n        }\n        schema.plugin(merge);\n        const mongooseModel = mongooseMob.getModel(this.mongooseConnection, name, schema);\n        collection = new MongooseCollection(name, mongooseModel);\n      }\n\n      this.collections[name] = collection;\n    }\n\n    getCollection(name) {\n      if (!this.collections[name]) {\n        throw new Error('unknown collection: ' + name);\n      }\n      return this.collections[name];\n    }\n\n    getCollections() {\n      return this.collections;\n    }\n  }\n\n  exports.MongooseAdapter = MongooseAdapter;\n\n\n\n}));\n"],"sourceRoot":"/source/"}